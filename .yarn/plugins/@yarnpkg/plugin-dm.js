/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-dm",
factory: function (require) {
var plugin=(()=>{var F=Object.create,h=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,M=Object.prototype.hasOwnProperty;var O=t=>h(t,"__esModule",{value:!0});var V=(t,e)=>{for(var a in e)h(t,a,{get:e[a],enumerable:!0})},E=(t,e,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of I(e))!M.call(t,n)&&n!=="default"&&h(t,n,{get:()=>e[n],enumerable:!(a=v(e,n))||a.enumerable});return t},l=t=>E(O(h(t!=null?F(x(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var A={};V(A,{default:()=>N});var L=l(require("@yarnpkg/core"));var f=l(require("@yarnpkg/core")),s=l(require("@yarnpkg/fslib")),k=l(require("clipanion"));var d=l(require("@yarnpkg/core")),o=l(require("@yarnpkg/fslib")),b=l(require("clipanion"));var w=l(require("@yarnpkg/core")),g=l(require("@yarnpkg/fslib")),p=t=>t.configuration.get("dmVendorFolder"),j=(t,e)=>g.ppath.join(p(t),w.structUtils.slugifyLocator(e)),D=t=>g.ppath.join(p(t),"includes.dm"),u=t=>g.ppath.join(p(t),"pathmap.json");var P=class{constructor(e){this.opts=e;this.dependencies=new Map;this.enabled=e.project.configuration.get("dmLinker")}async installPackage(e,a){if(!this.enabled)throw new b.UsageError('Installing DM packages requires "dmLinker: true" in .yarnrc.yml');let n=Boolean(this.opts.project.tryWorkspaceByLocator(e)),r=e.linkType===d.LinkType.HARD&&!n,i=d.structUtils.isVirtualLocator(e),c=j(this.opts.project,e);r&&(await o.xfs.mkdirPromise(c,{recursive:!0}),await o.xfs.copyPromise(c,a.prefixPath,{baseFs:a.packageFs,overwrite:!1}));let m=r?c:o.ppath.resolve(a.packageFs.getRealPath(),a.prefixPath);return this.dependencies.set(e.locatorHash,{packageLocator:e,packageLocation:m,packageDependencies:new Set}),{packageLocation:m,buildDirective:null}}getCustomDataKey(){return JSON.stringify({name:"DmInstaller",version:1})}async attachCustomData(e){}async attachInternalDependencies(e,a){let n=this.dependencies.get(e.locatorHash);if(typeof n=="undefined")throw new Error(`Assertion failed: Expected locator to be registered (${d.structUtils.prettyLocator(this.opts.project.configuration,e)})`);for(let[,r]of a)n.packageDependencies.add(r.locatorHash)}async attachExternalDependents(e,a){}async finalizeInstall(){return this.enabled?(await this.writeIncludes(),await this.writePathMap(),{}):(o.xfs.removeSync(p(this.opts.project),{recursive:!0}),{})}async writePathMap(){let e={};for(let[n,{packageLocation:r}]of this.dependencies)e[n]=o.ppath.relative(this.opts.project.cwd,r);let a=u(this.opts.project);await o.xfs.writeFilePromise(a,`${JSON.stringify(e,null,2)}
`)}async writeIncludes(){let e=D(this.opts.project),a=o.ppath.dirname(e),n=[];for(let{packageLocation:i}of this.dependencies.values()){let c=o.ppath.join(i,"includes.dm");!o.xfs.existsSync(c)||n.push(o.ppath.relative(a,c))}let r="";r+=`/*!
`,r+=` * This file is auto generated by DM installer (do not edit).
`,r+=` */
`,r+=`
`;for(let i of n)r+=`#include "${i}"
`;r==`
`,await o.xfs.mkdirPromise(a,{recursive:!0}),await o.xfs.writeFilePromise(e,r)}};var S="dm",y=class{supportsPackage(e,a){return e.languageName===S}async findPackageLocation(e,a){let n=u(a.project);if(!await s.xfs.existsPromise(n))throw new k.UsageError(`The project in ${a.project.cwd}/package.json doesn't seem to have been installed - running 'yarn install' might help`);let i=(await s.xfs.readJsonPromise(n))[f.structUtils.stringifyLocator(e)];if(i===void 0)throw new k.UsageError(`Couldn't find ${f.structUtils.prettyLocator(a.project.configuration,e)} in the install registry - running 'yarn install' might help`);return s.ppath.join(a.project.cwd,i)}async findPackageLocator(e,a){let n=p(a.project),r=s.ppath.contains(n,e);if(r===null)return null;let i=r.split(s.ppath.sep);if(i.length===0)return null;let c=s.ppath.join(n,i[0]);if(!await s.xfs.existsPromise(c))return null;let m=await s.xfs.readJsonPromise(c);return f.structUtils.parseLocator(m.locator)}makeInstaller(e){return new P(e)}};var H={configuration:{dmLinker:{type:L.SettingsType.BOOLEAN,description:"Enables DM linker",default:!1},dmVendorFolder:{type:L.SettingsType.ABSOLUTE_PATH,description:"Path where the packages will be extracted for later use",default:"./vendor"}},hooks:{afterAllInstalled:()=>{console.log("What a great DM install, am I right?")}},linkers:[y]},N=H;return A;})();
return plugin;
}
};
